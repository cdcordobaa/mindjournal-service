service: mindjournal-service

provider:
  name: aws
  profile: arkatechie-sso
  runtime: nodejs20.x
  architecture: arm64
  stage: ${opt:stage, 'shared'}
  region: ${opt:region, 'us-east-1'}
  memorySize: ${opt:memory, 1024}
  timeout: 10
  logRetentionInDays: 7
  versionFunctions: false
  deploymentBucket:
    blockPublicAccess: true
    maxPreviousDeploymentArtifacts: 5
    serverSideEncryption: AES256
  stackTags:
    service: ${self:service}
  tags:
    service: ${self:service}
  apiGateway:
    minimumCompressionSize: 1024
  tracing:
    apiGateway: true
    lambda: true
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - xray:PutTelemetryRecords
            - xray:PutTraceSegments
          Resource:
            - '*'
        - Effect: 'Allow'
          Action:
            - dynamodb:Query
            - dynamodb:PutItem
          Resource: ${self:custom.aws.databaseArn}
        - Effect: Allow
          Action:
            - events:PutEvents
          Resource:
            - ${self:custom.aws.analyticsBusArn}
            - ${self:custom.aws.domainBusArn}
  environment:
    ANALYTICS_BUS_NAME: ${self:custom.config.analyticsBusName}
    DOMAIN_BUS_NAME: ${self:custom.config.domainBusName}
    REGION: ${self:provider.region}
    TABLE_NAME: ${self:custom.config.tableName}
    SECURITY_API_ENDPOINT_GENERATE: ${self:custom.aws.securityApiEndpointGenerateCode}

plugins:
  - serverless-esbuild
  - serverless-offline
  - serverless-iam-roles-per-function

package:
  individually: true

custom:
  esbuild:
    bundle: true
    minify: false
    sourcemap: true
    target: 'node14'
    platform: node
    concurrency: 10
  config:
    # MAKE SURE TO UPDATE THE ACCOUNT NUMBER AND RANDOM STRING
    # GET YOUR API GATEWAY RANDOM STRING AFTER FIRST DEPLOYMENT OF SECURITY API
    awsAccountNumber: 905418204324
    securityApiGatewayRandomString: xqfe778sbk
    # You can change these but you need to be sure all other references are updated too in case you change them
    analyticsBusName: analytics
    domainBusName: sessions
    tableName: sessions
    apiGatewayCachingTtl:
      prod: 30
      shared: 0
      test: 0
    apiGatewayCachingTtlValue: ${self:custom.config.apiGatewayCachingTtl.${self:provider.stage}, self:custom.config.apiGatewayCachingTtl.test} # See: https://forum.serverless.com/t/api-gateway-custom-authorizer-caching-problems/4695
  aws:
    analyticsBusArn: arn:aws:events:${self:provider.region}:${self:custom.config.awsAccountNumber}:event-bus/${self:custom.config.analyticsBusName}
    domainBusArn: arn:aws:events:${self:provider.region}:${self:custom.config.awsAccountNumber}:event-bus/${self:custom.config.domainBusName}
    databaseArn: arn:aws:dynamodb:${self:provider.region}:${self:custom.config.awsAccountNumber}:table/${self:custom.config.tableName}
    securityApiEndpointGenerateCode: https://${self:custom.config.securityApiGatewayRandomString}.execute-api.${self:provider.region}.amazonaws.com/${self:provider.stage}/generateCode
    securityApiEndpointVerifyCode: https://${self:custom.config.securityApiGatewayRandomString}.execute-api.${self:provider.region}.amazonaws.com/${self:provider.stage}/verifyCode

functions:
  #
  # The authorizer function runs before all user-initiated requests fronted by it
  #
  # Authorizer:
  #   handler: src/infrastructure/authorizers/Authorizer.handler
  #   description: ${self:service} authorizer
  #   environment:
  #     SECURITY_API_ENDPOINT_VERIFY: ${self:custom.aws.securityApiEndpointVerifyCode}
  #
  # These use cases are driven by user interactions.
  #
  CreateSession:
    handler: src/sessionBuilder/infrastructure/adapters/handlers/createSession.handler
    description: Create a new session
    events:
      - http:
          method: POST
          path: /CreateSession
          # request:
          #   schemas:
          #     application/json: ${file(schema/CreateSessionInput.validator.json)}
  # CancelSlot:
  #   handler: src/infrastructure/adapters/web/CancelSlot.handler
  #   description: Cancel a slot
  #   events:
  #     - http:
  #         method: POST
  #         path: /CancelSlot
  #         authorizer:
  #           name: Authorizer
  #           resultTtlInSeconds: ${self:custom.config.apiGatewayCachingTtlValue}
  #           identitySource: method.request.header.Authorization
  #           type: request
  #         request:
  #           schemas:
  #             application/json: ${file(schema/Id.validator.json)}


resources:
  Resources:
    # DynamoDB
    SessionTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        TableName: ${self:custom.config.tableName}
        AttributeDefinitions:
          - AttributeName: itemType
            AttributeType: S
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: itemType
            KeyType: HASH
          - AttributeName: id
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        StreamSpecification:
          StreamViewType: NEW_AND_OLD_IMAGES
        TimeToLiveSpecification:
          AttributeName: expiresAt
          Enabled: true
    # API Gateway
    GatewayResponseDefault4XX:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: 'ApiGatewayRestApi'
    AuthFailureExpiredGatewayResponse:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: EXPIRED_TOKEN
        RestApiId:
          Ref: 'ApiGatewayRestApi'
        StatusCode: '401'
    AuthFailureUnauthorizedGatewayResponse:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: UNAUTHORIZED
        RestApiId:
          Ref: 'ApiGatewayRestApi'
        StatusCode: '401'
    # SQS Dead Letter Queue
    ReservationBusDlq:
      Type: 'AWS::SQS::Queue'
      Properties:
        QueueName: ReservationBusDlq
